var _a;
//логические операторы
console.log('' || 1 || undefined);
// let currentUser = null
// let defaultUser = "John"
// let nam = currentUser || defaultUser || "unnamed"
// alert( nam ); 
// выбирается "John" – первое истинное значение
var x;
false || (x = 0) || (x = 1);
console.log(x); //1
//ИЛИ "||" находит первое истинное значение
// Вычисляет операнды слева направо.
// Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
// Если все операнды являются ложными (false), возвращает последний из них.
//И "&&"" находит первое ложное значение
// Вычисляет операнды слева направо.
// Каждый операнд преобразует в логическое значение. Если результат false, останавливается и возвращает исходное значение этого операнда.
// Если все операнды были истинными, возвращается последний.
// Приоритет оператора && больше, чем у ||
// Приоритет НЕ ! является наивысшим из всех логических операторов
// , поэтому он всегда выполняется первым, перед && или ||.
// Получаем элементы
var input1 = document.querySelector('#task1 input');
var button1 = document.querySelector('#task1 button');
var output1 = document.querySelector('#task1 p');
// По нажатию на кнопку выводим результат
button1 === null || button1 === void 0 ? void 0 : button1.addEventListener('click', function () {
    // @ts-ignore
    output1.innerText = (+input1.value - +input1.value % 10) / 10 % 10;
});
// let login = prompt('Enter login') 
// if (login == 'Admin') {
//     let pass = prompt ('Enter password') 
//     if (pass == 'Я главный') {
//         alert('здравствуйте')    
//     } else if ( pass == null){
//         alert('отменено')    
//     } else {
//         alert('неверный пароль')    
//     }
// } else if (login == null) {
//     alert('отменено')    
// } else {
//     alert('я вас не знаю')    
// }
//Идентичные запси
//result a ?? b
// result = (a !== null && a !== undefined) ? a : b
//Оператор нулевого слияния возвращает значимые значения и пропускает только null и undefined
console.log((_a = undefined !== null && undefined !== void 0 ? undefined : null) !== null && _a !== void 0 ? _a : 'default');
console.log(undefined || null || 'default');
// || возвращает первое истинное значение.
// ?? возвращает первое определённое значение.
// Оператор нулевого слияния ?? — это быстрый способ выбрать первое «определённое» значение из списка.
// Используется для присвоения переменным значений по умолчанию:
// будет height=100, если переменная height равна null или undefined
// height = height ?? 100;
// Оператор ?? имеет очень низкий приоритет, лишь немного выше, чем у ? и =, 
// поэтому при использовании его в выражении, скорее всего, потребуются скобки.
// Запрещено использовать вместе с || или && без явно указанного приоритета, то есть без скобок.
//циклы
var n1 = 5;
var i = 1;
// while - цикл с предусловием; сначала проверяем условие, потом идем в тело цикла
//while (условие) {тело цикла выполняется пока условие истинно, иначе управление переходит 
// на следующую строку после цикла (цикл заканчивается)
//тело цикла
// }
while (i <= n1) {
    console.log(i);
    i++;
}
//бесконечный цикл с условием выхода
while (true) {
    if (i > 500)
        break;
    i++;
}
//do while - цикл с постусловием, сначала выполняем тело цикла, потом проверяем условие
//do {
// Тело цикла    
// } while (условие) тело цикла выполняется пока условие истинно, 
// иначе управление переходит на следующую строку после цикла (цикл заканчивается)
var number1;
do {
    //@ts-ignore 
    number1 = +prompt('введи число больше 0');
    console.log(number1);
} while (!number1);
 || number1 <= 0;
