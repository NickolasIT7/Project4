//логические операторы
console.log (''|| 1 ||undefined)

// let currentUser = null
// let defaultUser = "John"

// let nam = currentUser || defaultUser || "unnamed"
// alert( nam ); 
// выбирается "John" – первое истинное значение

let x
false || (x=0) || (x = 1)
console.log(x); //1

//ИЛИ "||" находит первое истинное значение
// Вычисляет операнды слева направо.
// Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
// Если все операнды являются ложными (false), возвращает последний из них.
//И "&&"" находит первое ложное значение
// Вычисляет операнды слева направо.
// Каждый операнд преобразует в логическое значение. Если результат false, останавливается и возвращает исходное значение этого операнда.
// Если все операнды были истинными, возвращается последний.
// Приоритет оператора && больше, чем у ||
// Приоритет НЕ ! является наивысшим из всех логических операторов
// , поэтому он всегда выполняется первым, перед && или ||.

// Получаем элементы
const input1 = document.querySelector('#task1 input')
const button1 = document.querySelector('#task1 button')
const output1 = document.querySelector('#task1 p')

// По нажатию на кнопку выводим результат
button1?.addEventListener('click', function() {
  // @ts-ignore
  output1.innerText = (+input1.value - +input1.value % 10) / 10 % 10
})


// let login = prompt('Enter login') 
// if (login == 'Admin') {
//     let pass = prompt ('Enter password') 
//     if (pass == 'Я главный') {
//         alert('здравствуйте')    
//     } else if ( pass == null){
//         alert('отменено')    
//     } else {
//         alert('неверный пароль')    
//     }
// } else if (login == null) {
//     alert('отменено')    
// } else {
//     alert('я вас не знаю')    
// }

//Идентичные запси
//result a ?? b
// result = (a !== null && a !== undefined) ? a : b
//Оператор нулевого слияния возвращает значимые значения и пропускает только null и undefined
console.log(undefined ?? null ?? 'default')
console.log(undefined || null || 'default')

// || возвращает первое истинное значение.
// ?? возвращает первое определённое значение.

// Оператор нулевого слияния ?? — это быстрый способ выбрать первое «определённое» значение из списка.
// Используется для присвоения переменным значений по умолчанию:
// будет height=100, если переменная height равна null или undefined
// height = height ?? 100;
// Оператор ?? имеет очень низкий приоритет, лишь немного выше, чем у ? и =, 
// поэтому при использовании его в выражении, скорее всего, потребуются скобки.
// Запрещено использовать вместе с || или && без явно указанного приоритета, то есть без скобок.

//циклы
let n1 = 5
let i = 1
// while - цикл с предусловием; сначала проверяем условие, потом идем в тело цикла
//while (условие) {тело цикла выполняется пока условие истинно, иначе управление переходит 
// на следующую строку после цикла (цикл заканчивается)
//тело цикла
// }
while (i<=n1) {
console.log(i) 
i++
}

//бесконечный цикл с условием выхода
while (true) {
if (i>500) break
i++    
}

//do while - цикл с постусловием, сначала выполняем тело цикла, потом проверяем условие
//do {
// Тело цикла    
// } while (условие) тело цикла выполняется пока условие истинно, 
// иначе управление переходит на следующую строку после цикла (цикл заканчивается)

let number1 
do {
//@ts-ignore 
number1 = +prompt('введи число больше 0')  
console.log(number1) 
}while ((!number1) || number1<=0)

// Цикл for
// 1.Инициация итератора
// 2.Проверка условия
// После проверки условия, если оно истинно, выполняется тело цикла, если ложно - выход
// 3.После каждого выполнения тела цикла делаем шаг итератора
// 4.Проверка условия
// for (инициация итератора; условие; шаг итератора) {
//   Тело цикла
//  }

// Выполнить начало
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → ...

// for (let i =1; i<n1; i++) {
//  console.log (i)
// }

//вариант с меткой
outer: for (let i = 0; i < 3; i++) {

  for (let j = 0; j < 3; j++) {

    let input = prompt(`Значение на координатах (${i},${j})`, '');

    // если пустая строка или Отмена, то выйти из обоих циклов
    if (!input) break outer; // (*)

    // сделать что-нибудь со значениями...
  }
}

// Вариант с флагом
let stopOuter = false //(Флаг)
for (let i = 0; i < 3; i++) {

  for (let j = 0; j < 3; j++) {
if (stopOuter) break
    let input = prompt(`Значение на координатах (${i},${j})`, '');

    // если пустая строка или Отмена, то выйти из обоих циклов
    if (!input) 
    stopOuter = true
    break
    // (*)

    // сделать что-нибудь со значениями...
  }
}

// // while – Проверяет условие перед каждой итерацией.
// do..while – Проверяет условие после каждой итерации.
// for (;;) – Проверяет условие перед каждой итерацией, есть возможность задать дополнительные настройки

for (let i=2; i<11; i+=2) {
 alert (i)  
}

// Вывести простые числа
// Натуральное число, большее 1, называется простым, если оно ни на что не делится, кроме себя и 1.
// Другими словами, n > 1 – простое, если при его делении на любое число кроме 1 и n есть остаток.
// Например, 5 это простое число, оно не может быть разделено без остатка на 2, 3 и 4.
// Напишите код, который выводит все простые числа из интервала от 2 до n.
// Для n = 10 результат должен быть 2,3,5,7.
// P.S. Код также должен легко модифицироваться для любых других интервалов.

const maxNumber = +(prompt('До какого числа искать простые числа') as string)
console.log (`Простые числа до ${maxNumber}`)
for (let i=2; i<maxNumber; i++) {
  let simple = true
  for (let j=2; j<i; j++) {
if (i%j==0) {
  simple = false
  break
  }
}
if (simple) console.log(i)
}

const maxNamber = +(prompt('До какого числа искать простые числа') as string)
console.log (`Простые числа до ${maxNamber}`)
outer:
for (let i=2; i<maxNamber; i++) {
for (let j=2; j<i; j++) {
if (!(i%j)) continue outer 
 }
 console.log(i)
}

// switch

// switch(x) {
//   case 'value1':  // if (x === 'value1')
//     ...
//     [break]

//   case 'value2':  // if (x === 'value2')
//     ...
//     [break]

//   default:
//     ...
//     [break]
// }

// Любое выражение может быть аргументом для switch/case
// // Если break нет, то выполнение пойдёт ниже по следующим case,
//  при этом остальные проверки игнорируются.

// const x = 7
// switch(x) {
//   case 1:
//    console.log('пн')
//   break
//   case 2:
//    console.log('вт')
//   break
//   case 3:
//    console.log('ср')
//   break
//   case 4:
//    console.log('чт')
//   break
//   case 5:
//    console.log('пт')
//   break
//   case 6:
//    console.log('сб')
//   break
//   case 7:
//    console.log('вс')
//   break
// default:
// console.log ('пора отдохнуть') 
// }
